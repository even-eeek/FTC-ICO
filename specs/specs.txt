
------------------------------------ FTC (Forgotten Coin) ------------------------------------

FTC (Forgotten Coin) is an ERC20 token on the BSC blockchain.

fields:
string _name: Forgotten Coin,
string _symbol: FTC,
uint8 _decimals: 18,
uint256 _amount: 5000000000

------------------ Crowdsale (ICO) ------------------

- The contract is CappedCrowdsale (10% of totalSupply, i.e 500000000 tokens) and is FinalizableCrowdsale.

- The token Distribution is as follows:
	tokenSalePercentage                = 10 (any unsold token will be transfered to gamePercentage)
	foundationPercentage               = 10
	liquidityAndMarketingPercentage    = 10
	gamePercentage                     = 70

- There are 3 stages: enum CrowdsaleStage { PreICO, ICO, PostICO }

	* In PreIco, the rate is $0.01 for 1 FTC i.e. 36900 FTC for 1 BNB (At the time of writing. The rate will be adjusted constantly for BNB price). The limit is 3% of totalSupply i.e. 150000000. Any remaining tokens in PreICO will be available in ICO.
	* In Ico, the rate is $0.03 for 1 FTC i.e. 12300 FTC for 1 BNB (At the time of writing. The rate will be adjusted constantly for BNB price). The limit is 7% of totalSupply i.e. 350000000. Any remaining tokens in ICO will be sent to GameVesting Contract.
	* in PostIco, the tokenBuy will be disabled

- In PreICO - There is a investorMinCap =  200000000000000000 wei (0.2 BNB) and investorHardCap = 3000000000000000000 wei (3 BNB).
- In ICO - There is a investorMinCap =  200000000000000000 wei (0.2 BNB) and investorHardCap = 10000000000000000000 wei (10 BNB).

- The contract has some important variables to keep the state of each investor and the contributed amount:
	mapping(address => uint256) public tokenPurchases -> a mapping to determine the amount of FTC tokens for an investor
	mapping(address => uint256) public tokenPayments -> a mapping to determine the amount paid in wei by an investor
	mapping(uint256 => address) private beneficiaries -> a mapping to determine beneficiaries

	uint256 public totalTokensPurchased -> a variables that holds the total number of tokens purchased in the sale.
	uint256 public totalBeneficiaries -> a variables that holds the total number of investors.

------------------ Vesting ------------------

	* The liquidityAndMarketingFund (10% of totalSupply) will be immediately transfered after the ICO.
	    m_token.safeTransfer(liquidityAndMarketingFund, LIQUIDITY_AND_MARKETING_SHARE);


	  ***** TokenVestingPool *****

		The TokenVestingPool Contract constructor has 2 fields:
			ERC20Basic _token -> our FTCToken
			uint256 _totalFunds -> total tokens for vesting contract

		When a beneficiary is added to a vesting contract, these are the fields that need to be filled up:
				address _beneficiary,
				uint256 _start,
				uint256 _cliff,
				uint256 _duration,
				uint256 _amount

		All users from the token sale will be part of the same TokenVestingPool Contract, called 'tokenSaleEscrow' as follows:

						tokenSaleEscrow = new TokenVestingPool(token, totalTokensPurchased);
						token.safeTransfer(address(tokenSaleEscrow), totalTokensPurchased);
						for (uint256 i = 0; i < totalBeneficiaries; i++) {
								address beneficiary = beneficiaries[i];
								uint256 purchase = tokenPurchases[beneficiary];
								tokenSaleEscrow.addBeneficiary(
										beneficiary,
										startEscrowTimestamp,
										CROWDSALE_ESCROW_CLIFF,
										CROWDSALE_ESCROW_DURATION,
										purchase
								);
						}

		***** TokenVesting *****

		The Foundation Vesting will be split between 2 vesting contract.
		The plan is to first vest 1% each month for 10 months and then vest 5% each month for 18 months, as follows:

						startEscrowTimestamp = block.timestamp;
						foundationEscrow1 = new TokenVesting(
								foundationFund,
								startEscrowTimestamp,
								FOUNDATION_1_ESCROW_CLIFF,
								FOUNDATION_1_ESCROW_DURATION,
								false // TokenVesting cannot be revoked
						);
						token.safeTransfer(address(foundationEscrow1), FOUNDATION_1_ESCROW_SHARE);

						foundationEscrow2 = new TokenVesting(
								foundationFund,
								startEscrowTimestamp + FOUNDATION_1_ESCROW_DURATION + 1 days,
								FOUNDATION_2_ESCROW_CLIFF,
								FOUNDATION_2_ESCROW_DURATION,
								false // TokenVesting cannot be revoked
						);
						token.safeTransfer(address(foundationEscrow2), FOUNDATION_2_ESCROW_SHARE);

		The Game Vesting contract will contain the 70% of total supply plus the remaining tokens from the PreICO and ICO:

						uint256 gameShare = token.totalSupply().sub(totalTokensPurchased);
						gameShare = gameShare.sub(FOUNDATION_1_ESCROW_SHARE);
						gameShare = gameShare.sub(FOUNDATION_2_ESCROW_SHARE);
						gameShare = gameShare.sub(LIQUIDITY_AND_MARKETING_SHARE);

						gameEscrow = new TokenVesting(
								gameFund,
								startEscrowTimestamp,
								GAME_ESCROW_CLIFF,
								GAME_ESCROW_DURATION,
								false // TokenVesting cannot be revoked
						);
						token.safeTransfer(address(gameEscrow), gameShare);
